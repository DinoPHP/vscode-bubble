{
    "name": "bubble-language",
    "displayName": "Bubble Language",
    "icon": "images/icon.png",
    "description": "Snippets, Syntax Highlighting, Hover, and Formatting for Bubble",
    "version": "1.0.2",
    "publisher": "DinoPHP",
    "license": "MIT",
    "author": {
        "name": "Ahmed Mohamed Ibrahim",
        "email": "ahmedmohamed@dinophp.com"
    },
    "homepage": "https://github.com/DinoPHP/vscode-bubble",
    "bugs": {
        "url": "https://github.com/DinoPHP/vscode-bubble/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/DinoPHP/vscode-bubble.git"
    },
    "engines": {
        "vscode": "*"
    },
    "iconDefinitions": {
        "_folder_dark": {
            "iconPath": "images/DinoPHP-icon.svg"
        }
    },
    "categories": [
        "Formatters",
        "Programming Languages",
        "Snippets",
        "Other"
    ],
    "keywords": [
        "php",
        "bubble",
        "snippets",
        "craft",
        "beautify",
        "dinophp"
    ],
    "activationEvents": [
        "onLanguage:bubble"
    ],
    "main": "./extension/index",
    "contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "bubbleViewsContainer",
                    "title": "Bubble container view",
                    "icon": "images/DinoPHP-icon.svg"
                }
            ]
        },
        "languages": [
            {
                "id": "bubble",
                "aliases": [
                    "HTML (Bubble)",
                    "PHP (Bubble)",
                    "bubble"
                ],
                "extensions": [
                    ".html.bubble",
                    ".php.bubble",
                    ".bubble"
                ],
                "configuration": "./src/languages/bubble.configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "bubble",
                "scopeName": "text.html.bubble",
                "path": "./src/syntaxes/bubble.tmLanguage",
                "embeddedLanguages": {
                    "source.json": "json",
                    "source.css": "css",
                    "source.css.scss": "scss",
                    "source.js": "javascript",
                    "source.ts": "typescript"
                }
            }
        ],
        "snippets": [
            {
                "language": "bubble",
                "path": "./src/snippets/snippets.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Bubble Language",
            "properties": {
                "bubble-language.hover": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to enable/disable Bubble hover."
                },
                "bubble-language.formatting": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to enable/disable Bubble PrettyDiff formatting."
                },
                "bubble-language.braceLine": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces."
                },
                "bubble-language.bracePadding": {
                    "type": "boolean",
                    "default": false,
                    "description": "Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings."
                },
                "bubble-language.braceStyle": {
                    "type": "string",
                    "enum": [
                        "collapse",
                        "collapse-preserve-inline",
                        "expand",
                        "none"
                    ],
                    "default": "none",
                    "description": "Emulates JSBeautify's brace_style option using existing Pretty Diff options."
                },
                "bubble-language.braces": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line."
                },
                "bubble-language.commentLine": {
                    "type": "boolean",
                    "default": false,
                    "description": "If a blank new line should be forced above comments."
                },
                "bubble-language.comments": {
                    "type": "boolean",
                    "default": false,
                    "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code."
                },
                "bubble-language.compressedCss": {
                    "type": "boolean",
                    "default": false,
                    "description": "If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors."
                },
                "bubble-language.correct": {
                    "type": "boolean",
                    "default": false,
                    "description": "Automatically correct some sloppiness in code."
                },
                "bubble-language.cssInsertLines": {
                    "type": "boolean",
                    "default": false,
                    "description": "Inserts new line characters between every CSS code block."
                },
                "bubble-language.elseLine": {
                    "type": "boolean",
                    "default": false,
                    "description": "If else_line is true then the keyword 'else' is forced onto a new line."
                },
                "bubble-language.endComma": {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "none"
                    ],
                    "default": false,
                    "description": "If there should be a trailing comma in arrays and objects. Value multiline only applies to modes beautify and diff."
                },
                "bubble-language.forceAttribute": {
                    "type": "boolean",
                    "default": false,
                    "description": "If all markup attributes should be indented each onto their own line."
                },
                "bubble-language.forceIndent": {
                    "type": "boolean",
                    "default": false,
                    "description": "Will force indentation upon all content and tags without regard for the creation of new text nodes."
                },
                "bubble-language.formatArray": {
                    "type": "string",
                    "enum": [
                        "default",
                        "indent",
                        "inline"
                    ],
                    "default": "default",
                    "description": "Determines if all array indexes should be indented, never indented, or left to the default."
                },
                "bubble-language.formatObject": {
                    "type": "string",
                    "enum": [
                        "default",
                        "indent",
                        "inline"
                    ],
                    "default": "default",
                    "description": "Determines if all object keys should be indented, never indented, or left to the default."
                },
                "bubble-language.functionName": {
                    "type": "boolean",
                    "default": false,
                    "description": "If a space should follow a JavaScript function name."
                },
                "bubble-language.indentStyle": {
                    "type": "string",
                    "enum": [
                        "space",
                        "tab"
                    ],
                    "default": "tab",
                    "description": "Choose to indent using tabs or spaces."
                },
                "bubble-language.indentLevel": {
                    "type": "integer",
                    "default": 0,
                    "description": "How much indentation padding should be applied to beautification? This option is internally used for code that requires switching between libraries."
                },
                "bubble-language.tabSize": {
                    "type": "integer",
                    "default": 0,
                    "description": "0 will default to the editor's tab size. Stores the number of 'inchar' values to comprise a single indentation."
                },
                "bubble-language.methodChain": {
                    "type": "integer",
                    "default": 0,
                    "description": "When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken."
                },
                "bubble-language.neverFlatten": {
                    "type": "boolean",
                    "default": false,
                    "description": "If destructured lists in script should never be flattend."
                },
                "bubble-language.newLine": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert an empty line at the end of output."
                },
                "bubble-language.noCaseIndent": {
                    "type": "boolean",
                    "default": false,
                    "description": "If a case statement should receive the same indentation as the containing switch block."
                },
                "bubble-language.noLeadZero": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether leading 0s in CSS values immediately preceeding a decimal should be removed or prevented."
                },
                "bubble-language.objectSort": {
                    "type": "boolean",
                    "default": false,
                    "description": "Sorts markup attributes and properties by key name in script and style."
                },
                "bubble-language.preserve": {
                    "type": "integer",
                    "default": 2,
                    "description": "The maximum number of consecutive empty lines to retain."
                },
                "bubble-language.preserveComment": {
                    "type": "boolean",
                    "default": false,
                    "description": "Prevent comment reformatting due to option wrap."
                },
                "bubble-language.quoteConvert": {
                    "type": "string",
                    "enum": [
                        "double",
                        "none",
                        "single"
                    ],
                    "default": "none",
                    "description": "If the quotes of script strings or markup attributes should be converted to single quotes or double quotes."
                },
                "bubble-language.space": {
                    "type": "boolean",
                    "default": true,
                    "description": "Inserts a space following the function keyword for anonymous functions."
                },
                "bubble-language.spaceClose": {
                    "type": "boolean",
                    "default": false,
                    "description": "Markup self-closing tags end will end with ' />' instead of '/>'."
                },
                "bubble-language.tagMerge": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allows immediately adjacement start and end markup tags of the same name to be combined into a single self-closing tag."
                },
                "bubble-language.tagSort": {
                    "type": "boolean",
                    "default": false,
                    "description": "Sort child items of each respective markup parent element."
                },
                "bubble-language.ternaryLine": {
                    "type": "boolean",
                    "default": true,
                    "description": "If ternary operators in JavaScript ? and : should remain on the same line."
                },
                "bubble-language.unformatted": {
                    "type": "boolean",
                    "default": false,
                    "description": "If markup tags should have their insides preserved. This option is only available to markup and does not support child tokens that require a different lexer."
                },
                "bubble-language.variableList": {
                    "type": "string",
                    "enum": [
                        "each",
                        "list",
                        "none"
                    ],
                    "default": "none",
                    "description": "If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated."
                },
                "bubble-language.vertical": {
                    "type": "boolean",
                    "default": false,
                    "description": "If lists of assignments and properties should be vertically aligned. This option is not used with the markup lexer."
                },
                "bubble-language.wrap": {
                    "type": "integer",
                    "default": 0,
                    "description": "Character width limit before applying word wrap. A 0 value disables this option. A negative value concatenates script strings."
                }
            }
        }
    },
    "capabilities": {
        "hoverProvider": "true"
    },
    "scripts": {
        "start": "rollup -c",
        "build": "rollup -c",
        "watch": "rollup -c -w"
    },
    "devDependencies": {
        "@types/mocha": "^8.0.3",
        "@types/node": "^14.6.0",
        "eslint": "^7.7.0",
        "eslint-config-prettier": "^6.11.0",
        "typescript": "^4.0.2",
        "vscode": "^1.1.37"
    },
    "dependencies": {
        "prettydiff": "^101.2.6",
        "rollup": "^2.26.5",
        "rollup-plugin-babel": "^4.4.0",
        "rollup-plugin-json": "^4.0.0"
    }
}
